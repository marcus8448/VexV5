set(TARGET_TRIPLE arm-none-eabi)

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_AR ${TARGET_TRIPLE}-ar)
set(CMAKE_C_COMPILER ${TARGET_TRIPLE}-gcc)
set(CMAKE_CXX_COMPILER ${TARGET_TRIPLE}-g++)
set(CMAKE_STRIP ${TARGET_TRIPLE}-strip)
set(CMAKE_OBJCOPY ${TARGET_TRIPLE}-objcopy)
set(CMAKE_CXX_COMPILER_ID GNU)

set(CMAKE_LINKER ${CMAKE_CXX_COMPILER})

if (ENABLE_LTO)
    message(NOTICE "LTO is enabled")

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto")

    execute_process(COMMAND ${TARGET_TRIPLE}-g++ -print-prog-name=liblto_plugin.${CMAKE_SHARED_LIBRARY_SUFFIX} OUTPUT_VARIABLE LibLTO OUTPUT_STRIP_TRAILING_WHITESPACE)

    set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> qc --plugin \"${LibLTO}\" <TARGET> <LINK_FLAGS> <OBJECTS>")
    set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> q --plugin \"${LibLTO}\" <TARGET> <LINK_FLAGS> <OBJECTS>")
    set(CMAKE_CXX_ARCHIVE_FINISH "<CMAKE_RANLIB> --plugin \"${LibLTO}\" <TARGET>")

    set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> qc --plugin \"${LibLTO}\" <TARGET> <LINK_FLAGS> <OBJECTS>")
    set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> q --plugin \"${LibLTO}\" <TARGET> <LINK_FLAGS> <OBJECTS>")
    set(CMAKE_C_ARCHIVE_FINISH "<CMAKE_RANLIB> --plugin \"${LibLTO}\" <TARGET>")
endif()
